{"version":3,"sources":["queryLight.ts"],"names":["qlWrapper","constructor","elements","_qlWrapper_entries","set","this","__classPrivateFieldSet","child","input","q","addClass","value","each","i","classList","add","removeClass","remove","toggleClass","hasClass","__classPrivateFieldGet","every","contains","on","eventName","callback","addEventListener","forEach","el","call","insertBefore","sibling","parent","get","insertAfter","nextSibling","next","insert","unambiguityRequire","appendChild","insertFirst","firstElement","firstElementChild","replace","newElement","replaceWith","clear","innerHTML","index","wrap","topOffset","offsetTop","text","innerText","val","count","length","selector","parentElement","matches","prev","previousElementSibling","nextElementSibling","elems","HTMLFormElement","formData","all","reduce","carry","Object","assign","name","equalTo","element","isEqualNode","inCollection","some","Error","pushElement","push","Function","document","selected","querySelectorAll","HTMLElement","Window","HTMLDocument","Array","Proxy","target","prop","receiver","Reflect","gotten","bind","Node"],"mappings":"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","file":"queryLight.min.js","sourcesContent":["/**\r\n * @fileOverview Lightweight module for DOM manipulations\r\n *\r\n * @author Alexandr Shamanin (slpAkkie)\r\n * @version 2.0.0\r\n */\r\n\r\n\r\n\r\n\r\n\r\n//\r\ninterface qlWrapper { [key: string]: any }\r\n//\r\ntype qlElement = HTMLElement | HTMLDocument\r\n//\r\ntype qlCommonElement = HTMLElement | qlWrapper\r\n//\r\ntype qlCollection = Array<qlElement>\r\n//\r\ntype qlInput = string | Array<Node> | qlElement | qlWrapper\r\n\r\n\r\n\r\n\r\n\r\n//\r\nclass qlWrapper {\r\n\r\n  /**\r\n   * @property {qlCollection}\r\n   */\r\n  #entries: qlCollection\r\n\r\n  constructor(elements) { this.#entries = elements }\r\n\r\n  /**\r\n   * TODO: Update to find in several elements\r\n   *\r\n   * @param {qlInput} input\r\n   * @returns {qlWrapper}\r\n   */\r\n  child(input: qlInput): qlWrapper { return q(input, this) }\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {qlWrapper}\r\n   */\r\n  addClass(value: string): qlWrapper { return this.each(i => i.classList.add(value)) }\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {qlWrapper}\r\n   */\r\n  removeClass(value: string): qlWrapper { return this.each(i => i.classList.remove(value)) }\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {qlWrapper}\r\n   */\r\n  toggleClass(value: string): qlWrapper { return this.each(i => i.hasClass(value) ? i.removeClass(value) : i.addClass(value)) }\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {qlWrapper}\r\n   */\r\n  hasClass(value: string): boolean { return this.#entries.every(i => (<HTMLElement>i).classList.contains(value)) }\r\n\r\n  /**\r\n   * @param {string} eventName\r\n   * @param {Function} callback\r\n   * @returns {qlWrapper}\r\n   */\r\n  on(eventName, callback): qlWrapper { return this.each(i => (<HTMLElement>i).addEventListener(eventName, callback)) }\r\n\r\n  /**\r\n   * @param {Function} callback\r\n   * @returns {qlWrapper}\r\n   */\r\n  each(callback: Function): qlWrapper {\r\n    this.#entries.forEach((el, i) => callback.call(q(el), q(el), i))\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @param {qlCommonElement} sibling\r\n   * @returns {qlCommonElement}\r\n   */\r\n  insertBefore(sibling: qlCommonElement): qlCommonElement {\r\n    sibling = q(sibling)\r\n    sibling.each(i => this.parent().get().insertBefore(i.get(), <Node>this.get()))\r\n\r\n    return sibling\r\n  }\r\n\r\n  /**\r\n   * @param {qlCommonElement} sibling\r\n   * @returns {qlCommonElement}\r\n   */\r\n  insertAfter(sibling: qlCommonElement): qlCommonElement {\r\n    let nextSibling = this.next()\r\n\r\n    return nextSibling ? nextSibling.insertBefore(q(sibling)) : this.parent().insert(q(sibling))\r\n  }\r\n\r\n  /**\r\n   * @param {qlCommonElement} sibling\r\n   * @returns {qlCommonElement}\r\n   */\r\n  insert(child: qlCommonElement): qlCommonElement {\r\n    this.unambiguityRequire()\r\n\r\n    child = q(child)\r\n    child.each(i => this.appendChild(i.get()))\r\n\r\n    return child\r\n  }\r\n\r\n  /**\r\n   * @param {qlCommonElement} sibling\r\n   * @returns {qlCommonElement}\r\n   */\r\n  insertFirst(child: qlCommonElement): qlCommonElement {\r\n    let firstElement = q(this.firstElementChild)\r\n\r\n    return firstElement ? firstElement.insertBefore(child) : this.insert(child)\r\n  }\r\n\r\n  /**\r\n   * @param {qlCommonElement} newElement\r\n   * @returns {qlCommonElement}\r\n   */\r\n  replace(newElement: qlCommonElement): qlCommonElement { return this.replaceWith(q(newElement).get()) || newElement }\r\n\r\n  /**\r\n   * @returns {qlWrapper}\r\n   */\r\n  clear(): qlWrapper { return this.each(el => el.innerHTML = '') }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @param {boolean} wrap\r\n   * @returns {qlElement | qlWrapper}\r\n   */\r\n  get(index: number = 0, wrap: boolean = false): qlElement | qlWrapper { return (wrap ? q(this.#entries[index]) : this.#entries[index]) || null }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  topOffset(): number { return this.offsetTop }\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {string}\r\n   */\r\n  text(value: string = null): string { return typeof value === 'string' && this.each(i => i.innerText = value) ? value : this.innerText }\r\n\r\n  /**\r\n   * @param {string} value\r\n   * @returns {string}\r\n   */\r\n  val(value: string = null): string { return typeof value === 'string' && this.each(i => i.value = value) ? value : this.value }\r\n\r\n  /**\r\n   * @returns {number}\r\n   */\r\n  count(): number { return this.#entries.length }\r\n\r\n  /**\r\n   * @param {string} selector\r\n   * @returns {qlWrapper}\r\n   */\r\n  parent(selector: string = null): qlWrapper {\r\n    let parent: qlWrapper = this.parentElement\r\n    if (parent.matches(':root')) return null\r\n\r\n    return !selector || parent.matches(selector) ? parent : parent.parent(selector)\r\n  }\r\n\r\n  /**\r\n   * @returns {qlWrapper}\r\n   */\r\n  prev(): qlWrapper { return this.previousElementSibling }\r\n\r\n  /**\r\n   * @returns {qlWrapper}\r\n   */\r\n  next(): qlWrapper { return this.nextElementSibling }\r\n\r\n  /**\r\n   * @returns {qlWrapper}\r\n   */\r\n  elems(): qlWrapper { return this.get() instanceof HTMLFormElement ? q([...this.elements]) : null }\r\n\r\n  /**\r\n   * @returns {Object}\r\n   */\r\n  formData(): Object { return (<Array<HTMLInputElement>>this.elems().all()).reduce((carry, i) => Object.assign(carry, { [i.name]: i.value }), {}) }\r\n\r\n  /**\r\n   * @param {qlCommonElement} element\r\n   * @returns {boolean}\r\n   */\r\n  equalTo(element: qlCommonElement): boolean { return this.isEqualNode((element = q(element)).unambiguityRequire().get()) }\r\n\r\n  /**\r\n   * @param {qlCommonElement} element\r\n   * @returns {boolean}\r\n   */\r\n  inCollection(element: qlCommonElement): boolean { return this.all().some(i => q(i).equalTo(element)) }\r\n\r\n\r\n\r\n  /**\r\n   * @throws {Error}\r\n   * @returns {qlWrapper}\r\n   */\r\n  unambiguityRequire(): qlWrapper {\r\n    if (this.count() > 1) throw new Error(`Вызов не однозначен, в коллекции ${this.count()} элементов`)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @param {qlInput} element\r\n   * @returns {qlWrapper}\r\n   */\r\n  pushElement(element: qlInput): qlWrapper {\r\n    if (element = q(element)) this.inCollection(element) || this.#entries.push(<qlElement>element.get())\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * @returns {qlCollection}\r\n   */\r\n  all(): qlCollection { return this.#entries }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @param {qlInput | Function} input\r\n * @param {qlInput} parent\r\n * @returns {qlWrapper}\r\n */\r\nexport default function q(input: qlInput | Function, parent?: qlInput): qlWrapper {\r\n\r\n  if (input instanceof Function) return q(document).on('DOMContentLoaded', input)\r\n  else if (input instanceof qlWrapper) return input\r\n\r\n  parent = q(parent || document)\r\n  if (parent.count() !== 1) throw new Error('There are several elements into the qlWrapper')\r\n  parent = <qlElement>parent.get()\r\n\r\n\r\n\r\n  let selected = []\r\n\r\n  if (typeof input === 'string') selected = [...parent.querySelectorAll(input)]\r\n  else if (input instanceof HTMLElement || input instanceof Window || input instanceof HTMLDocument) selected = [<qlElement>input]\r\n  else if (input instanceof Array) selected = input\r\n\r\n  if (selected.length === 0) return null\r\n\r\n\r\n\r\n  return new Proxy(new qlWrapper(selected), {\r\n    get(target, prop, receiver) {\r\n      if (prop in target) return Reflect.get(target, prop, receiver)\r\n\r\n      target.unambiguityRequire()\r\n      let gotten = Reflect.get(target.get(), prop, receiver)\r\n\r\n      return typeof gotten === 'function' ? gotten.bind(target.get()) : gotten instanceof Node ? q(<qlInput>gotten) : gotten\r\n    },\r\n\r\n    set(target, name, val) {\r\n      if (name in target) return Reflect.set(target, name, val)\r\n\r\n      target.unambiguityRequire()\r\n      return Reflect.set(target.get(), name, val)\r\n    }\r\n  })\r\n\r\n}\r\n"]}